<erl>
-record
(
   input,
   {
      session_token,
      player_id,
      battlemap_id,
      instance_id,
      char_id,
      path,
      target_id
   }
).

-include("/my/src/tacticians-server/src/timed_cache_data.hrl").

parse_input (Req) ->
   JSONReqMap = jiffy:decode(Req, [return_maps]),
   #input
   {
      session_token = maps:get(<<"session_token">>, JSONReqMap),
      player_id = maps:get(<<"player_id">>, JSONReqMap),
      battlemap_id = maps:get(<<"battlemap_id">>, JSONReqMap),
      instance_id = maps:get(<<"instance_id">>, JSONReqMap),
      char_id = maps:get(<<"char_id">>, JSONReqMap),
      path = maps:get(<<"path">>, JSONReqMap),
      target_id = maps:get(<<"target_id">>, JSONReqMap)
   }.

handle (Req) ->
   %%%% Parse
   Input = parse_input(Req),
   %%%% Fetch
   Battlemap = timed_cache:fetch(battlemap_db, Input#input.battlemap_id),
   BattlemapInstance =
      timed_cache:fetch
      (
         battlemap_instance_db,
         <<"0">>
      ),
   Character = timed_cache:fetch(character_db, Input#input.char_id),
   CharInst =
      battlemap_instance:get_char_instance
      (
         BattlemapInstance,
         Input#input.char_id
      ),
   %%%% Calc
   true =
      battlemap_instance:can_play_char_instance
      (
         BattlemapInstance,
         Input#input.player_id,
         Input#input.char_id
      ),
   {X, Y} =
      battlemap:cross
      (
         Battlemap,
         character_instance:get_location(CharInst),
         character:get_movement_points(Character),
         Input#input.path,
         battlemap_instance:get_char_instances(BattlemapInstance)
      ),
   NewBattlemapInstance =
      battlemap_instance:set_char_instance
      (
         battlemap_instance:post_play_char_instance
         (
            BattlemapInstance,
            Input#input.char_id
         ),
         Input#input.char_id,
         character_instance:set_location(CharInst, X, Y)
      ),
   %%%% Commit
   database_shim:commit(battlemap_instance_db, <<"0">>, NewBattlemapInstance),
   %%%% Reply
   jiffy:encode([[<<"okay">>]]).

out(A) ->
   {
      content,
      "application/json; charset=UTF-8",
      handle(A#arg.clidata)
   }.
</erl>
